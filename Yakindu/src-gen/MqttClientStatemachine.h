/** Generated by YAKINDU Statechart Tools code generator. */

#ifndef MQTTCLIENTSTATEMACHINE_H_
#define MQTTCLIENTSTATEMACHINE_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the MqttClientStatemachine state machine.
*/
typedef struct MqttClientStatemachine MqttClientStatemachine;

/*!
* Forward declaration of the data structure for the MqttClientStatemachineIface interface scope.
*/
typedef struct MqttClientStatemachineIface MqttClientStatemachineIface;

/*!
* Forward declaration of the data structure for the MqttClientStatemachineIfaceWizFi360 interface scope.
*/
typedef struct MqttClientStatemachineIfaceWizFi360 MqttClientStatemachineIfaceWizFi360;

/*!
* Forward declaration of the data structure for the MqttClientStatemachineTimeEvents interface scope.
*/
typedef struct MqttClientStatemachineTimeEvents MqttClientStatemachineTimeEvents;

#ifdef __cplusplus
}
#endif

#include "..\src\sc_types.h"
#include "..\src\sc_rxc.h"

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file Header of the state machine 'MqttClientStatemachine'.
*/

/*! Define number of states in the state enum */
#define MQTTCLIENTSTATEMACHINE_STATE_COUNT 13

/*! Define dimension of the state configuration vector for orthogonal states. */
#define MQTTCLIENTSTATEMACHINE_MAX_ORTHOGONAL_STATES 1
/*! Define maximum number of time events that can be active at once */
#define MQTTCLIENTSTATEMACHINE_MAX_PARALLEL_TIME_EVENTS 1

/*! Define indices of states in the StateConfVector */
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_ONLINE 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_ONLINE_R1_CONNECTTOBROKER 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_ONLINE_R1_READY 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_ONLINE_R1_PUBLISHTOPIC 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_ONLINE_R1_WAIT 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_ONLINE_R1_DISCONNECTFROMBROKER 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE_R1_SETTOPIC 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE_R1_READY 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE_R1_SETSTATIONMODE 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE_R1_CONFIGUREMQTT 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE_R1_CONFIGUREDHCP 0
#define SCVI_MQTTCLIENTSTATEMACHINE_MAIN_REGION_OFFLINE_R1_CONNECTTOACCESSPOINT 0

/*! Enumeration of all states */ 
typedef enum
{
	MqttClientStatemachine_last_state,
	MqttClientStatemachine_main_region_Online,
	MqttClientStatemachine_main_region_Online_r1_ConnectToBroker,
	MqttClientStatemachine_main_region_Online_r1_Ready,
	MqttClientStatemachine_main_region_Online_r1_PublishTopic,
	MqttClientStatemachine_main_region_Online_r1_Wait,
	MqttClientStatemachine_main_region_Online_r1_DisconnectFromBroker,
	MqttClientStatemachine_main_region_Offline,
	MqttClientStatemachine_main_region_Offline_r1_SetTopic,
	MqttClientStatemachine_main_region_Offline_r1_Ready,
	MqttClientStatemachine_main_region_Offline_r1_SetStationMode,
	MqttClientStatemachine_main_region_Offline_r1_ConfigureMqtt,
	MqttClientStatemachine_main_region_Offline_r1_ConfigureDhcp,
	MqttClientStatemachine_main_region_Offline_r1_ConnectToAccesspoint
} MqttClientStatemachineStates;


/*! Type declaration of the data structure for the MqttClientStatemachineIface interface scope. */
struct MqttClientStatemachineIface
{
	sc_integer dT;
	sc_integer publishInterval;
};



/*! Type declaration of the data structure for the MqttClientStatemachineIfaceWizFi360 interface scope. */
struct MqttClientStatemachineIfaceWizFi360
{
	sc_observable setStationMode;
	sc_boolean setStationMode_raised;
	sc_observable configureDhcp;
	sc_boolean configureDhcp_raised;
	sc_observable connectToAccessPoint;
	sc_boolean connectToAccessPoint_raised;
	sc_observable configureMqtt;
	sc_boolean configureMqtt_raised;
	sc_observable setTopic;
	sc_boolean setTopic_raised;
	sc_observable connectToBroker;
	sc_boolean connectToBroker_raised;
	sc_observable disconnectFromBroker;
	sc_boolean disconnectFromBroker_raised;
	sc_observable publishTopic;
	sc_boolean publishTopic_raised;
	sc_boolean ok_raised;
	sc_boolean error_raised;
	sc_boolean fail_raised;
	sc_boolean wifiConnected;
};



/*! Type declaration of the data structure for the MqttClientStatemachineTimeEvents interface scope. */
struct MqttClientStatemachineTimeEvents
{
	sc_boolean mqttClientStatemachine_main_region_Online_r1_Wait_tev0_raised;
	sc_boolean mqttClientStatemachine_main_region_Offline_r1_Ready_tev0_raised;
};





typedef struct MqttClientStatemachineIfaceWizFi360EvBuf MqttClientStatemachineIfaceWizFi360EvBuf;
struct MqttClientStatemachineIfaceWizFi360EvBuf {
	sc_boolean ok_raised;
	sc_boolean error_raised;
	sc_boolean fail_raised;
};

typedef struct MqttClientStatemachineTimeEventsEvBuf MqttClientStatemachineTimeEventsEvBuf;
struct MqttClientStatemachineTimeEventsEvBuf {
	sc_boolean MqttClientStatemachine_main_region_Online_r1_Wait_time_event_0_raised;
	sc_boolean MqttClientStatemachine_main_region_Offline_r1_Ready_time_event_0_raised;
};

typedef struct MqttClientStatemachineEvBuf MqttClientStatemachineEvBuf;
struct MqttClientStatemachineEvBuf {
	MqttClientStatemachineIfaceWizFi360EvBuf ifaceWizFi360;
	MqttClientStatemachineTimeEventsEvBuf timeEvents;
};


/*! 
 * Type declaration of the data structure for the MqttClientStatemachine state machine.
 * This data structure has to be allocated by the client code. 
 */
struct MqttClientStatemachine
{
	MqttClientStatemachineStates stateConfVector[MQTTCLIENTSTATEMACHINE_MAX_ORTHOGONAL_STATES];
	MqttClientStatemachineIface iface;
	MqttClientStatemachineIfaceWizFi360 ifaceWizFi360;
	MqttClientStatemachineTimeEvents timeEvents;
	MqttClientStatemachineEvBuf current;
	sc_boolean isExecuting;
};



/*! Initializes the MqttClientStatemachine state machine data structures. Must be called before first usage.*/
extern void mqttClientStatemachine_init(MqttClientStatemachine* handle);


/*! Performs a 'run to completion' step. */
extern void mqttClientStatemachine_run_cycle(MqttClientStatemachine* handle);

/*! Activates the state machine. */
extern void mqttClientStatemachine_enter(MqttClientStatemachine* handle);

/*! Deactivates the state machine. */
extern void mqttClientStatemachine_exit(MqttClientStatemachine* handle);



/*! Raises a time event. */
extern void mqttClientStatemachine_raise_time_event(MqttClientStatemachine* handle, sc_eventid evid);

/*! Gets the value of the variable 'dT' that is defined in the default interface scope. */ 
extern sc_integer mqttClientStatemachine_get_dT(const MqttClientStatemachine* handle);
/*! Sets the value of the variable 'dT' that is defined in the default interface scope. */ 
extern void mqttClientStatemachine_set_dT(MqttClientStatemachine* handle, sc_integer value);
/*! Gets the value of the variable 'publishInterval' that is defined in the default interface scope. */ 
extern sc_integer mqttClientStatemachine_get_publishInterval(const MqttClientStatemachine* handle);
/*! Sets the value of the variable 'publishInterval' that is defined in the default interface scope. */ 
extern void mqttClientStatemachine_set_publishInterval(MqttClientStatemachine* handle, sc_integer value);
/*! Returns the observable for the out event 'setStationMode' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_setStationMode(MqttClientStatemachine* handle);

/*! Checks if the out event 'setStationMode' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_setStationMode(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'configureDhcp' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_configureDhcp(MqttClientStatemachine* handle);

/*! Checks if the out event 'configureDhcp' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_configureDhcp(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'connectToAccessPoint' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_connectToAccessPoint(MqttClientStatemachine* handle);

/*! Checks if the out event 'connectToAccessPoint' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_connectToAccessPoint(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'configureMqtt' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_configureMqtt(MqttClientStatemachine* handle);

/*! Checks if the out event 'configureMqtt' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_configureMqtt(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'setTopic' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_setTopic(MqttClientStatemachine* handle);

/*! Checks if the out event 'setTopic' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_setTopic(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'connectToBroker' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_connectToBroker(MqttClientStatemachine* handle);

/*! Checks if the out event 'connectToBroker' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_connectToBroker(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'disconnectFromBroker' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_disconnectFromBroker(MqttClientStatemachine* handle);

/*! Checks if the out event 'disconnectFromBroker' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_disconnectFromBroker(const MqttClientStatemachine* handle);

/*! Returns the observable for the out event 'publishTopic' that is defined in the interface scope 'WizFi360'. */ 
extern sc_observable* mqttClientStatemachine_WizFi360_get_publishTopic(MqttClientStatemachine* handle);

/*! Checks if the out event 'publishTopic' that is defined in the interface scope 'WizFi360' has been raised. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_is_raised_publishTopic(const MqttClientStatemachine* handle);

/*! Raises the in event 'ok' that is defined in the interface scope 'WizFi360'. */ 
extern void mqttClientStatemachine_WizFi360_raise_ok(MqttClientStatemachine* handle);
/*! Raises the in event 'error' that is defined in the interface scope 'WizFi360'. */ 
extern void mqttClientStatemachine_WizFi360_raise_error(MqttClientStatemachine* handle);
/*! Raises the in event 'fail' that is defined in the interface scope 'WizFi360'. */ 
extern void mqttClientStatemachine_WizFi360_raise_fail(MqttClientStatemachine* handle);
/*! Gets the value of the variable 'wifiConnected' that is defined in the interface scope 'WizFi360'. */ 
extern sc_boolean mqttClientStatemachine_WizFi360_get_wifiConnected(const MqttClientStatemachine* handle);
/*! Sets the value of the variable 'wifiConnected' that is defined in the interface scope 'WizFi360'. */ 
extern void mqttClientStatemachine_WizFi360_set_wifiConnected(MqttClientStatemachine* handle, sc_boolean value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean mqttClientStatemachine_is_active(const MqttClientStatemachine* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean mqttClientStatemachine_is_final(const MqttClientStatemachine* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean mqttClientStatemachine_is_state_active(const MqttClientStatemachine* handle, MqttClientStatemachineStates state);


#ifdef __cplusplus
}
#endif 

#endif /* MQTTCLIENTSTATEMACHINE_H_ */
